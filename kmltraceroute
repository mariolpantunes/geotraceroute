#! /bin/bash

cachedir=cache

default_gateway=$(netstat -rn | grep '^\(default\|0\.0\.0\.0\)' | awk '{print $2}')

header() {
    cat <<HEADER
<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Document>

<Style id="source">
<IconStyle>
<Icon>
<href>https://raw.githubusercontent.com/mariolpantunes/kmltraceroute/master/icons/flag.png</href>
</Icon>
</IconStyle>
</Style>

<Style id="jump">
<IconStyle>
<Icon>
<href>https://raw.githubusercontent.com/mariolpantunes/kmltraceroute/master/icons/hosting-servers.png</href>
</Icon>
</IconStyle>
</Style>

<Style id="loop">
<IconStyle>
<Icon>
<href>https://raw.githubusercontent.com/mariolpantunes/kmltraceroute/master/icons/backup.png</href>
</Icon>
</IconStyle>
</Style>

<Style id="destination">
<IconStyle>
<Icon>
<href>https://raw.githubusercontent.com/mariolpantunes/kmltraceroute/master/icons/destination.png</href>
</Icon>
</IconStyle>
</Style>

<Style id="lost">
<IconStyle>
<Icon>
<href>https://raw.githubusercontent.com/mariolpantunes/kmltraceroute/master/icons/lost.png</href>
</Icon>
</IconStyle>
</Style>

HEADER
}


get_ip_location() {
    local C=""
    local IP=$1

    echo -e "IP = $IP"

    if [ "$IP" = "_" ]; then
        echo "0,0 "
        return 0
    fi
    
    if [ -e GeoIP-override.txt ] ; then
	C="$(grep "^$IP " GeoIP-override.txt | cut -d"#" -f1)"
    fi
   
    if [ -z "$C" ] && [ -e "$cachedir/GeoIP-cache.txt" ] ; then
    C=$(grep -m 1 "^$IP " "$cachedir/GeoIP-cache.txt")
    fi

    if [ "$C" ]; then
	LONG=$(echo "$C" |cut -d" " -f2)
	LAT=$(echo "$C" |cut -d" " -f3)
	return
    fi

    LONG=""
    LAT=""
    
    if [ "$default_gateway" = "$IP" ]; then
    url=https://freegeoip.live/json/
    else
    url=https://freegeoip.live/json/$IP
    fi
    
    LOCATION=$(curl -s $url | jq -r '.longitude, .latitude')
    if [ "$LOCATION" ]; then
    read LONG LAT < <(echo $LOCATION)
    echo $IP $LONG $LAT >> "$cachedir/GeoIP-cache.txt"
    echo -e "$LONG,$LAT "
    return 0
    fi
    return 1
}

tracehost() {
    local RES="$1"
    echo -e "Trace Host..."

    echo -e "RES(#1):"
    echo -e "$RES"

    local LONGLATS=""
    local ICON=""
    IPS=()
    RTLS=()

    echo -e "Lines:"
    while IFS= read -r line; do
    echo -e $line
    IPS+=($(echo $line | awk '{print $1}'))
    RTLS+=($(echo $line | awk '{print $2}'))
    done <<< "$RES"

    echo -e "IPS:"
    printf '%s\n' "${IPS[@]}"

    

    # Remove missing RTL
    local END=$(expr ${#RTLS[@]} - 1)
    if [ "${RTLS[0]}" = "_" ]; then
        RTLS[0]=0.0
    fi
    for i in $(seq 1 $END); do
        if [ "${RTLS[$i]}" = "_" ]; then
            RTLS[$i]=${RTLS[(( $i-1 ))]}
        fi
    done

    echo -e "RTLS:"
    printf '%s\n' "${RTLS[@]}"

    max=${RTLS[0]}
    min=${RTLS[1]}

    for i in "${RTLS[@]}"; do
        #echo -e $i
        (( $(echo "$i > $max" |bc -l) )) && max=$i
        #(( $(echo "$i < $min" |bc -l) )) && min=$i
    done

    #echo "Max value is $max, minimal value is $min"

    STEP=$(echo "($max-$min)/5.0" |bc -l)
    #echo -e "STEP = $STEP"
    THRES1=$(echo "$min + $STEP" |bc -l)
    #echo -e "THRES1 = $THRES1"
    THRES2=$(echo "$THRES1 + $STEP" |bc -l)
    #echo -e "THRES2 = $THRES2"
    THRES3=$(echo "$THRES2 + $STEP" |bc -l)
    #echo -e "THRES3 = $THRES3"
    THRES4=$(echo "$THRES3 + $STEP" |bc -l)
    #echo -e "THRES4 = $THRES4"

    END=$(expr ${#IPS[@]} - 1)
    for i in $(seq 0 $END); do
    
    IP=${IPS[i]}
    NEXT_IP=${IPS[((i+1))]}

    LONGLAT=$(get_ip_location "$IP")
    echo -e "LONGLAT = $LONGLAT"

	name=$(getent hosts "$IP" | awk '{print $2}')

    NEXTLONGLAT=$(get_ip_location "$NEXT_IP")

    ICON="jump"
    if [ "$IP" = "${IPS[0]}" ]; then
        ICON="source"
    fi

	if [ "$targetip" = "$IP" ]; then
		labelname="$targetname"
        ICON="destination"
	else
		labelname=""
	fi

    if [ "$LONGLAT" = "0,0 " ]; then
        ICON="lost"
    fi

    cat <<EOF
<Placemark>
<name>$labelname</name>
<description>GeoIP position for $name [$IP]</description>
<styleUrl>#$ICON</styleUrl> 
<Point><coordinates>$LONGLAT</coordinates></Point>
</Placemark>
EOF

    if [ $i -lt $END ]; then
        RTL=${RTLS[((i+1))]}
        local COLOR="ff3b55ed"
       
        if (( $(echo "$RTL <= $THRES4" |bc -l) )); then
            COLOR="ff5cd5f6"
        fi

        if (( $(echo "$RTL <= $THRES3" |bc -l) )); then
            COLOR="ffa3ae3c"
        fi

        if (( $(echo "$RTL <= $THRES2" |bc -l) )); then
            COLOR="ff9b6320"
        fi

        if (( $(echo "$RTL <= $THRES1" |bc -l) )); then
            COLOR="ff5f3f17"
        fi

        cat <<EOF

<Placemark> 
<LineString>
<coordinates>
$LONGLAT
$NEXTLONGLAT
</coordinates>
</LineString>
<Style> 
<LineStyle>  
<color>#$COLOR</color>
</LineStyle> 
</Style>
</Placemark>

EOF
    fi
done
}

footer() {
    cat <<FOOTER
</Document>
</kml>
FOOTER
}


# Run the traceroute with the parameter defined by the user
RET=$(traceroute -n $@ 2>&1)
RETVAL=$?
# Error, print the error message
if [ $RETVAL -gt 0 ]; then
   echo -e "$RET"
   exit $RETVAL
fi

# Filter the output of the traceroute 
FILTERED=$(echo -e "$RET" | tail -n +2 | awk '{print $2" "$3}' | sed -r 's/\*/_/g')
echo -e "$FILTERED"

# Output a valid KML
#header
tracehost "$FILTERED"
#footer
